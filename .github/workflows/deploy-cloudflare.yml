name: Deploy to Cloudflare Pages and Update Homepage

on:
  push:
    branches: [main, master]
    paths:
      - 'app/**'
      - 'public/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'vite.config.ts'
      - 'tsconfig.json'
      - 'tailwind.config.*'
      - '.github/workflows/deploy-cloudflare.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Remix SPA
        run: pnpm build

      - name: Ensure SPA fallback (_redirects)
        run: |
          if [ -f public/_redirects ]; then
            mkdir -p build/client
            cp public/_redirects build/client/_redirects
          fi

      - name: Create Cloudflare Pages Project if not exists
        run: |
          # Derive a valid project slug from repo name
          BASE_NAME="${{ github.event.repository.name }}"
          BASE_SLUG=$(echo "$BASE_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/^-+|-+$//g')
          CANDIDATE="$BASE_SLUG"
          
          # Check if project exists
          RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/cf_response.json \
            -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${CANDIDATE}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          HTTP_CODE=${RESPONSE: -3}
          
          if [ "$HTTP_CODE" = "404" ]; then
            echo "Project ${CANDIDATE} not found. Creating new project..."
            
            # Create new project
            CREATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/cf_create_response.json \
              -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"${CANDIDATE}\",
                \"production_branch\": \"main\",
                \"build_config\": {
                  \"build_command\": \"pnpm build\",
                  \"destination_dir\": \"build/client\",
                  \"root_dir\": \".\"
                }
              }")
            
            CREATE_HTTP_CODE=${CREATE_RESPONSE: -3}
            
            if [ "$CREATE_HTTP_CODE" = "200" ] || [ "$CREATE_HTTP_CODE" = "201" ]; then
              echo "‚úÖ Successfully created Cloudflare Pages project: ${CANDIDATE}"
              cat /tmp/cf_create_response.json | jq '.result.subdomain' || echo "Project created successfully"
              echo "PROJECT_NAME=${CANDIDATE}" >> "$GITHUB_ENV"
            else
              echo "‚ùå Failed to create project. HTTP Code: $CREATE_HTTP_CODE"
              cat /tmp/cf_create_response.json || echo "No response body"
              exit 1
            fi
          elif [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Project ${CANDIDATE} already exists"
            cat /tmp/cf_response.json | jq '.result.subdomain' || echo "Project found"
            echo "PROJECT_NAME=${CANDIDATE}" >> "$GITHUB_ENV"
          else
            echo "‚ö†Ô∏è Unexpected response ($HTTP_CODE) for candidate name '${CANDIDATE}'. Trying fallback with short SHA suffix..."
            FALLBACK="${BASE_SLUG}-${GITHUB_SHA:0:7}"
            RESPONSE_FALLBACK=$(curl -s -w "%{http_code}" -o /tmp/cf_response_fallback.json \
              -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${FALLBACK}" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json")
            HTTP_CODE_FB=${RESPONSE_FALLBACK: -3}

            if [ "$HTTP_CODE_FB" = "404" ]; then
              echo "Fallback project ${FALLBACK} not found. Creating..."
              CREATE_FB=$(curl -s -w "%{http_code}" -o /tmp/cf_create_fb.json \
                -X POST "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"name\": \"${FALLBACK}\",
                  \"production_branch\": \"main\",
                  \"build_config\": {
                    \"build_command\": \"pnpm build\",
                    \"destination_dir\": \"build/client\",
                    \"root_dir\": \".\"
                  }
                }")
              CREATE_FB_CODE=${CREATE_FB: -3}
              if [ "$CREATE_FB_CODE" = "200" ] || [ "$CREATE_FB_CODE" = "201" ]; then
                echo "‚úÖ Successfully created Cloudflare Pages project: ${FALLBACK}"
                echo "PROJECT_NAME=${FALLBACK}" >> "$GITHUB_ENV"
                cat /tmp/cf_create_fb.json | jq '.result.subdomain' || true
              else
                echo "‚ùå Failed to create fallback project. HTTP Code: $CREATE_FB_CODE"; cat /tmp/cf_create_fb.json || true; exit 1
              fi
            elif [ "$HTTP_CODE_FB" = "200" ]; then
              echo "‚úÖ Fallback project ${FALLBACK} already exists"
              echo "PROJECT_NAME=${FALLBACK}" >> "$GITHUB_ENV"
              cat /tmp/cf_response_fallback.json | jq '.result.subdomain' || true
            else
              echo "‚ùå Unexpected response when checking fallback. HTTP Code: $HTTP_CODE_FB"
              cat /tmp/cf_response.json || echo "No response body"
              exit 1
            fi
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: cloudflare-deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.PROJECT_NAME }}
          directory: build/client
          gitHubToken: ${{ secrets.ADMIN_TOKEN }}
          wranglerVersion: '3'

      - name: Update Repository Homepage URL
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              try {
                await github.rest.repos.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  homepage: deploymentUrl,
                  description: 'Remix SPA ‚Äì Cloudflare Pages static deployment'
                });
                
                console.log(`‚úÖ Repository homepage updated to: ${deploymentUrl}`);
              } catch (error) {
                console.error('‚ùå Failed to update repository homepage:', error);
                core.setFailed(`Failed to update homepage: ${error.message}`);
              }
            } else {
              console.log('‚ö†Ô∏è No deployment URL found, skipping homepage update');
            }

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Cloudflare Pages Deployment**\n\n‚úÖ Successfully deployed to: ${deploymentUrl}\n\nüìù Preview your changes at the link above!`
              });
            }

      - name: Create GitHub deployment
        if: always()
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Cloudflare Pages deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            return deployment.data.id;

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const deploymentId = ${{ steps.create-deployment.outputs.result }};
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: deploymentUrl || '',
              description: state === 'success' ? 'Deployment succeeded' : 'Deployment failed'
            });
