name: Deploy to Cloudflare Pages and Update Homepage

on:
  push:
    branches: [main, master]
    paths:
      - 'app/**'
      - 'public/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'vite.config.ts'
      - 'tsconfig.json'
      - 'tailwind.config.*'
      - '.github/workflows/deploy-cloudflare.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare Pages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Remix SPA
        run: pnpm build

      - name: Ensure SPA fallback (_redirects)
        run: |
          if [ -f public/_redirects ]; then
            mkdir -p build/client
            cp public/_redirects build/client/_redirects
          fi

      - name: Compute Cloudflare project slug
        run: |
          BASE_NAME="${{ github.event.repository.name }}"
          # lowercase, replace non [a-z0-9-] with '-', trim leading/trailing '-', and cap length to 63
          SLUG=$(echo "$BASE_NAME" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9-]+/-/g' | sed -E 's/^-+|-+$//g' | cut -c1-63)
          if [ -z "$SLUG" ]; then
            SLUG="site-${GITHUB_RUN_ID}"
          fi
          echo "Using Cloudflare project: $SLUG"
          echo "PROJECT_SLUG=$SLUG" >> "$GITHUB_ENV"

      - name: Ensure Cloudflare Pages project exists (wrangler)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          echo "Wrangler version:"; pnpm dlx wrangler --version
          test -n "$CLOUDFLARE_ACCOUNT_ID" || { echo "CLOUDFLARE_ACCOUNT_ID is empty"; exit 1; }
          test -n "$CLOUDFLARE_API_TOKEN" || { echo "CLOUDFLARE_API_TOKEN is empty"; exit 1; }

          echo "Checking for existing project: ${PROJECT_SLUG}"
          LIST_JSON=$(pnpm dlx wrangler pages project list --json --account-id "$CLOUDFLARE_ACCOUNT_ID")
          echo "$LIST_JSON" | jq -e '. | type == "array"' >/dev/null || { echo "Unexpected list output"; echo "$LIST_JSON"; exit 1; }
          EXISTS=$(echo "$LIST_JSON" | jq -r --arg name "$PROJECT_SLUG" '.[] | select(.name==$name) | .name' | head -n1)
          if [ -n "$EXISTS" ]; then
            echo "Project '${PROJECT_SLUG}' already exists"
          else
            echo "Creating project '${PROJECT_SLUG}'..."
            pnpm dlx wrangler pages project create "$PROJECT_SLUG" --production-branch=main --account-id "$CLOUDFLARE_ACCOUNT_ID" --no-interactive
            echo "Verifying creation..."
            LIST_JSON=$(pnpm dlx wrangler pages project list --json --account-id "$CLOUDFLARE_ACCOUNT_ID")
            EXISTS=$(echo "$LIST_JSON" | jq -r --arg name "$PROJECT_SLUG" '.[] | select(.name==$name) | .name' | head -n1)
            if [ -z "$EXISTS" ]; then
              echo "Project creation did not succeed. Check API token permissions (Account: Cloudflare Pages: Edit) and Account ID correctness."
              exit 1
            fi
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        id: cloudflare-deploy
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ env.PROJECT_SLUG }}
          directory: build/client
          gitHubToken: ${{ secrets.ADMIN_TOKEN }}
          wranglerVersion: '3'

      - name: Update Repository Homepage URL
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              try {
                await github.rest.repos.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  homepage: deploymentUrl,
                  description: 'Remix SPA ‚Äì Cloudflare Pages static deployment'
                });
                
                console.log(`‚úÖ Repository homepage updated to: ${deploymentUrl}`);
              } catch (error) {
                console.error('‚ùå Failed to update repository homepage:', error);
                core.setFailed(`Failed to update homepage: ${error.message}`);
              }
            } else {
              console.log('‚ö†Ô∏è No deployment URL found, skipping homepage update');
            }

      - name: Comment on PR with deployment URL
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            
            if (deploymentUrl && deploymentUrl !== '') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `üöÄ **Cloudflare Pages Deployment**\n\n‚úÖ Successfully deployed to: ${deploymentUrl}\n\nüìù Preview your changes at the link above!`
              });
            }

      - name: Create GitHub deployment
        if: always()
        id: create-deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Cloudflare Pages deployment',
              auto_merge: false,
              required_contexts: []
            });
            
            return deployment.data.id;

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.cloudflare-deploy.outputs.url }}';
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            const deploymentId = ${{ steps.create-deployment.outputs.result }};
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: deploymentUrl || '',
              description: state === 'success' ? 'Deployment succeeded' : 'Deployment failed'
            });
